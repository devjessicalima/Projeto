from flask import Flask, request, jsonify
from flask_cors import CORS
import pickle
import random
import re

app = Flask(__name__)
CORS(app)

# Carregar modelo treinado
with open('modelo_chatbot.pkl', 'rb') as f:
    model, vectorizer = pickle.load(f)

# Respostas para cada inten√ß√£o
respostas_por_intencao = {
    "cumprimento": [
    "Ol√°! Como posso te ajudar hoje? üòä",
    "Oi! Estou aqui para tirar suas d√∫vidas sobre o projeto Compass.",
    "Seja bem-vindo(a)! Como posso ajudar?"
],
  "sobre_site": [
    "A Compass √© uma plataforma que conecta empresas que desejam doar com ONGs e pessoas que precisam. Nosso objetivo √© combater o desperd√≠cio e ajudar quem mais precisa.",
    "A Compass surgiu para facilitar a doa√ß√£o de recursos por empresas, promovendo impacto social e reduzindo o desperd√≠cio.",
    "Somos uma ponte entre solidariedade e oportunidade. A Compass conecta doadores e benefici√°rios para transformar vidas!"
],
"funcionamento": [
    "Empresas cadastradas informam os itens que desejam doar, e ONGs ou benefici√°rios podem se cadastrar para receber. A Compass faz essa media√ß√£o.",
    "O site permite que empresas publiquem suas doa√ß√µes e que ONGs ou pessoas em vulnerabilidade social se cadastrem para receber.",
    "Tudo √© feito de forma simples: quem quer doar cadastra os itens, e quem precisa se inscreve para receber. A Compass conecta essas pontas."
],
"criacao": [
    "O projeto Compass foi criado por estudantes da Universidade Nove de Julho como parte de um trabalho acad√™mico.",
    "A Compass nasceu em 2024 como um projeto universit√°rio com prop√≥sito social.",
    "Criado por um grupo de alunos da UNINOVE, o projeto tem como foco a solidariedade e o combate ao desperd√≠cio."
],
"impacto_social": [
    "A Compass contribui diretamente para a redu√ß√£o do desperd√≠cio de alimentos e materiais, promovendo inclus√£o e solidariedade.",
    "O impacto √© grande: recursos que seriam descartados chegam a quem realmente precisa.",
    "A plataforma conecta empresas a ONGs e pessoas em situa√ß√£o de vulnerabilidade, promovendo responsabilidade social."
],
"beneficios_empresa": [
    "As empresas que doam atrav√©s da Compass podem receber incentivos fiscais e tamb√©m refor√ßar sua imagem como socialmente respons√°veis.",
    "Doar atrav√©s da Compass pode gerar benef√≠cios fiscais, al√©m de fortalecer o compromisso social da empresa.",
    "Sim! Al√©m de contribuir com a sociedade, a empresa pode aproveitar benef√≠cios legais e tribut√°rios ao fazer doa√ß√µes."
],
"contato": [
    "Voc√™ pode entrar em contato conosco pelas redes sociais ou pelo e-mail dispon√≠vel no rodap√© do site oficial.",
    "Fale com a nossa equipe por meio das redes sociais ou pelo formul√°rio de contato no site.",
    "Estamos √† disposi√ß√£o! Visite o final da p√°gina para encontrar nossos canais de contato."
],
"despedida": [
    "Tchau! Volte sempre ao Chatbot Compass!",
    "At√© logo! Qualquer d√∫vida, estou por aqui. üòä",
    "Obrigado por conversar com a gente. At√© a pr√≥xima!"
],
"ajuda": [
  "Claro! Posso te explicar sobre o projeto, como doar, como funciona a plataforma e muito mais.",
  "Me pergunte sobre o site, como ele funciona, ou como entrar em contato.",
  "Estou aqui para ajudar! Pergunte sobre doa√ß√µes, impacto social ou como participar."
]

}

def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)  # Remove pontua√ß√£o
    return text

def get_bot_response(user_input):
    user_input = preprocess_text(user_input)
    X_input = vectorizer.transform([user_input])
    probs = model.predict_proba(X_input)[0]
    max_prob = max(probs)
    intencao_predita = model.classes_[probs.argmax()]

    if max_prob < 0.05:
        return "Desculpe, ainda estou aprendendo e n√£o entendi bem."

    resposta = respostas_por_intencao.get(intencao_predita)
    if isinstance(resposta, list):
        return random.choice(resposta)
    return resposta or "Desculpe, ainda estou aprendendo e n√£o entendi bem."


@app.route('/ask', methods=['POST'])
def ask():
    data = request.get_json()
    user_message = data.get('message', '')
    bot_reply = get_bot_response(user_message)
    return jsonify({'reply': bot_reply})


if __name__ == "__main__":
    app.run(debug=True)